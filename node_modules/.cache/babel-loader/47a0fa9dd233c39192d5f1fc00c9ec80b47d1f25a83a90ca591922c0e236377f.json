{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport Recorder from 'js-audio-recorder';\nexport default {\n  name: 'MyRecorder',\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      recorder: null,\n      playTime: 0,\n      timer: null,\n      src: null\n    };\n  },\n  created() {\n    this.recorder = new Recorder({\n      sampleBits: 16,\n      // 采样位数，支持 8 或 16，默认是 16\n      sampleRate: 16000,\n      // 采样率，支持 11025、16000、22050、24000、44100、48000，根据浏览器默认值，Chrome 是 48000\n      numChannels: 1 // 声道数，支持 1 或 2， 默认是 1\n    });\n  },\n  methods: {\n    // 开始录音\n    handleStart() {\n      this.recorder = new Recorder();\n      Recorder.getPermission().then(() => {\n        console.log('开始录音');\n        this.recorder.start(); // 开始录音\n      }, error => {\n        this.$message({\n          message: '请先允许该网页使用麦克风',\n          type: 'info'\n        });\n        console.log(`${error.name} : ${error.message}`);\n      });\n    },\n    handlePause() {\n      console.log('暂停录音');\n      this.recorder.pause(); // 暂停录音\n    },\n    handleResume() {\n      console.log('恢复录音');\n      this.recorder.resume(); // 恢复录音\n    },\n    handleStop() {\n      console.log('停止录音');\n      this.recorder.stop(); // 停止录音\n    },\n    handlePlay() {\n      console.log('播放录音');\n      console.log(this.recorder);\n      this.recorder.play(); // 播放录音\n\n      // 播放时长\n      this.timer = setInterval(() => {\n        try {\n          this.playTime = this.recorder.getPlayTime();\n        } catch (error) {\n          this.timer = null;\n        }\n      }, 100);\n    },\n    handlePausePlay() {\n      console.log('暂停播放');\n      this.recorder.pausePlay(); // 暂停播放\n\n      // 播放时长\n      this.playTime = this.recorder.getPlayTime();\n      this.time = null;\n    },\n    handleResumePlay() {\n      console.log('恢复播放');\n      this.recorder.resumePlay(); // 恢复播放\n\n      // 播放时长\n      this.timer = setInterval(() => {\n        try {\n          this.playTime = this.recorder.getPlayTime();\n        } catch (error) {\n          this.timer = null;\n        }\n      }, 100);\n    },\n    handleStopPlay() {\n      console.log('停止播放');\n      this.recorder.stopPlay(); // 停止播放\n\n      // 播放时长\n      this.playTime = this.recorder.getPlayTime();\n      this.timer = null;\n    },\n    handleDestroy() {\n      console.log('销毁实例');\n      this.recorder.destroy(); // 销毁实例\n      this.timer = null;\n    },\n    downloadPCM() {\n      console.log('下载PCM格式数据');\n      // 注：使用该方法会默认调用 stop() 方法\n      this.recorder.downloadPCM('record-pcm');\n    },\n    downloadWAV() {\n      console.log('下载WAV格式数据');\n      // 注：使用该方法会默认调用 stop() 方法\n      this.recorder.downloadWAV('record-wav');\n    },\n    uploadRecord() {\n      if (this.recorder == null || this.recorder.duration === 0) {\n        this.$message({\n          message: '请先录音',\n          type: 'error'\n        });\n        return false;\n      }\n      this.recorder.pause(); // 暂停录音\n      this.timer = null;\n      console.log('上传录音'); // 上传录音\n\n      const formData = new FormData();\n      const blob = this.recorder.getPCMBlob(); // 获取 pcm 格式音频数据\n      // 此处获取到blob对象后需要设置fileName满足当前项目上传需求，这里选择直接把blob作为file塞入formData\n      const newBolb = new Blob([blob], {\n        type: 'audio/wav'\n      });\n      const fileOfBlob = new File([newbolb], new Date().getTime() + '.wav');\n      formData.append('file', fileOfBlob);\n      const url = window.URL.createObjectURL(fileOfBlob);\n      this.src = url;\n      // const axios = require('axios')\n      // axios.post(url, formData).then(res => {\n      //   console.log(res.data.data[0].url)\n      // })\n    }\n  }\n};","map":{"version":3,"names":["Recorder","name","props","msg","String","data","recorder","playTime","timer","src","created","sampleBits","sampleRate","numChannels","methods","handleStart","getPermission","then","console","log","start","error","$message","message","type","handlePause","pause","handleResume","resume","handleStop","stop","handlePlay","play","setInterval","getPlayTime","handlePausePlay","pausePlay","time","handleResumePlay","resumePlay","handleStopPlay","stopPlay","handleDestroy","destroy","downloadPCM","downloadWAV","uploadRecord","duration","formData","FormData","blob","getPCMBlob","newBolb","Blob","fileOfBlob","File","newbolb","Date","getTime","append","url","window","URL","createObjectURL"],"sources":["src/components/MyRecorder.vue"],"sourcesContent":["<template>\r\n  <div style=\"padding: 20px;\">\r\n    <h1>{{ msg }}</h1>\r\n    <h3>录音上传</h3>\r\n    <div style=\"font-size:14px\">\r\n      <h3>录音时长：{{ recorder && recorder.duration.toFixed(4) }}</h3>\r\n      <br />\r\n      <el-button type=\"primary\" @click=\"handleStart\">开始录音</el-button>\r\n      <el-button type=\"info\" @click=\"handlePause\">暂停录音</el-button>\r\n      <el-button type=\"success\" @click=\"handleResume\">继续录音</el-button>\r\n      <el-button type=\"warning\" @click=\"handleStop\">停止录音</el-button>\r\n      <br />\r\n      <br />\r\n      <h3>\r\n        播放时长：{{ recorder && (playTime > recorder.duration ? recorder.duration.toFixed(4) : playTime.toFixed(4)) }}\r\n      </h3>\r\n      <br />\r\n      <el-button type=\"primary\" @click=\"handlePlay\">播放录音</el-button>\r\n      <el-button type=\"info\" @click=\"handlePausePlay\">暂停播放</el-button>\r\n      <el-button type=\"success\" @click=\"handleResumePlay\">继续播放</el-button>\r\n      <el-button type=\"warning\" @click=\"handleStopPlay\">停止播放</el-button>\r\n      <el-button type=\"error\" @click=\"handleDestroy\">销毁录音</el-button>\r\n      <el-button type=\"primary\" @click=\"downloadPCM\">下载PCM数据</el-button>\r\n      <el-button type=\"primary\" @click=\"downloadWAV\">下载WAV数据</el-button>\r\n      <el-button type=\"primary\" @click=\"uploadRecord\">上传</el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Recorder from 'js-audio-recorder'\r\n\r\nexport default {\r\n  name: 'MyRecorder',\r\n  props: {\r\n    msg: String\r\n  },\r\n  data() {\r\n    return {\r\n      recorder: null,\r\n      playTime: 0,\r\n      timer: null,\r\n      src: null\r\n    }\r\n  },\r\n  created() {\r\n    this.recorder = new Recorder({\r\n      sampleBits: 16, // 采样位数，支持 8 或 16，默认是 16\r\n      sampleRate: 16000, // 采样率，支持 11025、16000、22050、24000、44100、48000，根据浏览器默认值，Chrome 是 48000\r\n      numChannels: 1, // 声道数，支持 1 或 2， 默认是 1\r\n    })\r\n  },\r\n  methods: {\r\n    // 开始录音\r\n    handleStart() {\r\n      this.recorder = new Recorder()\r\n      Recorder.getPermission().then(() => {\r\n        console.log('开始录音')\r\n        this.recorder.start() // 开始录音\r\n      }, (error) => {\r\n        this.$message({\r\n          message: '请先允许该网页使用麦克风',\r\n          type: 'info'\r\n        })\r\n        console.log(`${error.name} : ${error.message}`)\r\n      })\r\n    },\r\n    handlePause() {\r\n      console.log('暂停录音')\r\n      this.recorder.pause() // 暂停录音\r\n    },\r\n    handleResume() {\r\n      console.log('恢复录音')\r\n      this.recorder.resume() // 恢复录音\r\n    },\r\n    handleStop() {\r\n      console.log('停止录音')\r\n      this.recorder.stop() // 停止录音\r\n    },\r\n    handlePlay() {\r\n      console.log('播放录音')\r\n      console.log(this.recorder)\r\n      this.recorder.play() // 播放录音\r\n\r\n      // 播放时长\r\n      this.timer = setInterval(() => {\r\n        try {\r\n          this.playTime = this.recorder.getPlayTime()\r\n        } catch (error) {\r\n          this.timer = null\r\n        }\r\n      }, 100)\r\n    },\r\n    handlePausePlay() {\r\n      console.log('暂停播放')\r\n      this.recorder.pausePlay() // 暂停播放\r\n\r\n      // 播放时长\r\n      this.playTime = this.recorder.getPlayTime()\r\n      this.time = null\r\n    },\r\n    handleResumePlay() {\r\n      console.log('恢复播放')\r\n      this.recorder.resumePlay() // 恢复播放\r\n\r\n      // 播放时长\r\n      this.timer = setInterval(() => {\r\n        try {\r\n          this.playTime = this.recorder.getPlayTime()\r\n        } catch (error) {\r\n          this.timer = null\r\n        }\r\n      }, 100)\r\n    },\r\n    handleStopPlay() {\r\n      console.log('停止播放')\r\n      this.recorder.stopPlay() // 停止播放\r\n\r\n      // 播放时长\r\n      this.playTime = this.recorder.getPlayTime()\r\n      this.timer = null\r\n    },\r\n    handleDestroy() {\r\n      console.log('销毁实例')\r\n      this.recorder.destroy() // 销毁实例\r\n      this.timer = null\r\n    },\r\n    downloadPCM() {\r\n      console.log('下载PCM格式数据')\r\n      // 注：使用该方法会默认调用 stop() 方法\r\n      this.recorder.downloadPCM('record-pcm')\r\n    },\r\n    downloadWAV() {\r\n      console.log('下载WAV格式数据')\r\n      // 注：使用该方法会默认调用 stop() 方法\r\n      this.recorder.downloadWAV('record-wav')\r\n    },\r\n    uploadRecord() {\r\n      if (this.recorder == null || this.recorder.duration === 0) {\r\n        this.$message({\r\n          message: '请先录音',\r\n          type: 'error'\r\n        })\r\n        return false\r\n      }\r\n      this.recorder.pause() // 暂停录音\r\n      this.timer = null\r\n      console.log('上传录音') // 上传录音\r\n\r\n      const formData = new FormData()\r\n      const blob = this.recorder.getPCMBlob() // 获取 pcm 格式音频数据\r\n      // 此处获取到blob对象后需要设置fileName满足当前项目上传需求，这里选择直接把blob作为file塞入formData\r\n      const newBolb = new Blob([blob], { type: 'audio/wav' })\r\n      const fileOfBlob = new File([newbolb], new Date().getTime() + '.wav')\r\n      formData.append('file', fileOfBlob)\r\n      const url = window.URL.createObjectURL(fileOfBlob)\r\n      this.src = url\r\n      // const axios = require('axios')\r\n      // axios.post(url, formData).then(res => {\r\n      //   console.log(res.data.data[0].url)\r\n      // })\r\n    }\r\n  }\r\n}\r\n</script>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}